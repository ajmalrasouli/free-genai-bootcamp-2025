version: '3.8'

services:
  launcher:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dari-launcher
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - dari-network
    restart: unless-stopped

  fa-mud:
    build:
      context: ../fa-mud
      dockerfile: Dockerfile
    container_name: dari-fa-mud
    ports:
      - "8001:8001"
    networks:
      - dari-network
    restart: unless-stopped

  finger-spelling:
    build:
      context: ../finger-spelling
      dockerfile: Dockerfile
    container_name: dari-finger-spelling
    ports:
      - "8002:8002"
    volumes:
      - ../finger-spelling/asl_model.joblib:/app/asl_model.joblib
      - ../finger-spelling/asl_data.csv:/app/asl_data.csv
      - ../finger-spelling/asl_app.log:/app/asl_app.log
    networks:
      - dari-network
    restart: unless-stopped

  # Removed the old single lang-portal service

  # Added lang-portal API service (backend)
  lang-portal-api:
    build:
      context: ../lang-portal/server
      dockerfile: Dockerfile
    container_name: dari-lang-portal-api-prod # Unique name
    ports:
      - "8003:8003"
    environment:
      - NODE_ENV=production
    networks:
      - dari-network
    restart: unless-stopped

  # Added lang-portal Client service (frontend)
  lang-portal-client:
    build:
      context: ../lang-portal/client
      dockerfile: Dockerfile # Uses the production Nginx Dockerfile
      args:
        VITE_API_URL: /api
    container_name: dari-lang-portal-client-prod # Unique name
    ports:
      # Expose Nginx port 80 on host port 8009 (or choose another free port)
      - "8009:80"
    networks:
      - dari-network
    restart: unless-stopped
    depends_on:
      - lang-portal-api # Depends on the backend API

  listening-comp:
    build:
      context: ../listening-comp
      dockerfile: Dockerfile
    container_name: dari-listening-comp
    ports:
      - "8004:8004"
    networks:
      - dari-network
    restart: unless-stopped

  opea-comps:
    build:
      context: ../opea-comps
      dockerfile: Dockerfile
    container_name: dari-opea-comps
    ports:
      - "8005:8005"
    networks:
      - dari-network
    restart: unless-stopped

  song-vocab:
    build:
      context: ../song-vocab
      dockerfile: Dockerfile
    container_name: dari-song-vocab
    ports:
      - "8006:8006"
    environment:
      # Add environment variable for the search API key
      - SERP_API_KEY=${SERP_API_KEY}  # Will be loaded from your local environment or .env file
    networks:
      - dari-network
    restart: unless-stopped

  visual-novel:
    build:
      context: ../visual-novel
      dockerfile: Dockerfile
    container_name: dari-visual-novel
    ports:
      - "8007:8007"
    networks:
      - dari-network
    restart: unless-stopped

  writing-practice:
    build:
      context: ../writing-practice
      dockerfile: Dockerfile
    container_name: dari-writing-practice
    ports:
      - "8008:8008"
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}  # Will be loaded from your local environment or .env file
    networks:
      - dari-network
    restart: unless-stopped

  # -- Commenting out TTS Service temporarily to resolve Docker mount error --
  tts-service:
    image: ghcr.io/coqui-ai/tts-cpu:latest
    container_name: phcr_tts-microservice
    ports:
      - "5006:5002"
    environment:
      - MODEL_NAME=tts_models/en/ljspeech/tacotron2-DDC
    command: ["python3", "-m", "TTS.server.server", "--host", "0.0.0.0", "--port", "5002"]
    networks:
      - dari-network
    restart: unless-stopped
  # -- End Commented TTS Service --

networks:
  dari-network:
    name: dari-network
